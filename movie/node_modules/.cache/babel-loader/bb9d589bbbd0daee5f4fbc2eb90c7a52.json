{"ast":null,"code":"var _jsxFileName = \"/Users/kimhwi/Documents/programming/react/movie_app_2021/src/App.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; //PropTypes 모듈을 이용하여 변수형이 다를경우 콘솔에 에러메시지 할당 but 예제 실행시 작동이 안되는것 같다.\n\nimport axios from \"axios\"; //fatch의 상위레이어개념\n\nimport Movie from \"./Movies\"; //동일폴더에 존재하는 파일 import\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      movies: [] //movies 미리 선언, 값이 할당되지 않음.\n\n    };\n\n    this.getMovies = async () => {\n      //어싱크로노스로 실행하여 데이터를 모두 받기전 렌더되지 않도록힘\n      const {\n        data: {\n          data: {\n            movies\n          }\n        }\n      } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"); //axios를 이용하여 proxy server에 있는 데이터를 movies에 할당. es 최신버전의 함수 활용\n      //await를 이용하여 axios가 모든 data를 가져올 수 있도록 기다림.\n\n      this.setState({\n        movies,\n        isLoading: false\n      }); //setState를 이용하여야 정보를 전달할 수 있음\n    };\n  }\n\n  componentDidMount() {\n    //componet가 mount가 되며 실행되는 함수이며 getMovies();를 실행하도록 하였음.\n    this.getMovies();\n  }\n\n  render() {\n    //렌더가 반복 실행되며 변경되는 컴포넌트에 대해서만 변경을 해주는 것이 리액트의 가장 큰 특징이며, 같은 홈페이지에서 새로고침 없이 \n    const {\n      isLoading,\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loader__text\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie //map함수를 이용하여 server에서 받아온 movies에 접근하여 모든 변수들에 동시에 Movies.js에서 정의된 moive함수에 파라미터로 전달하여 npx를 활용하여 화면에 출력한다.\n        , {\n          id: movie.id,\n          year: movie.year,\n          title: movie.title,\n          summary: movie.summary,\n          poster: movie.medium_cover_image,\n          genres: movie.genres\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this) // ))\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kimhwi/Documents/programming/react/movie_app_2021/src/App.js"],"names":["React","PropTypes","axios","Movie","App","Component","state","isLoading","movies","getMovies","data","get","setState","componentDidMount","render","map","movie","id","year","title","summary","medium_cover_image","genres"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAAmC;;AACnC,OAAOC,KAAP,MAAkB,OAAlB,C,CAA0B;;AAC1B,OAAOC,KAAP,MAAkB,UAAlB,C,CAA4B;;;;AAG1B,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAC/BC,KAD+B,GACvB;AACNC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,MAAM,EAAC,EAFD,CAEG;;AAFH,KADuB;;AAAA,SAM/BC,SAN+B,GAMnB,YAAY;AAAC;AACvB,YAAM;AAACC,QAAAA,IAAI,EAAC;AAACA,UAAAA,IAAI,EAAC;AAACF,YAAAA;AAAD;AAAN;AAAN,UAAyB,MAAMN,KAAK,CAACS,GAAN,CAAU,0DAAV,CAArC,CADsB,CAEtB;AACA;;AACD,WAAKC,QAAL,CAAc;AAACJ,QAAAA,MAAD;AAASD,QAAAA,SAAS,EAAG;AAArB,OAAd,EAJuB,CAIoB;AAC3C,KAX8B;AAAA;;AAY/BM,EAAAA,iBAAiB,GAAG;AAAC;AACnB,SAAKJ,SAAL;AACD;;AAKHK,EAAAA,MAAM,GAAE;AAAC;AACH,UAAM;AAACP,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAsB,KAAKF,KAAjC;AACA,wBACE;AAAS,MAAA,SAAS,EAAG,WAArB;AAAA,gBACGC,SAAS,gBACJ;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACA;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADI,gBAIN;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACGC,MAAM,CAACO,GAAP,CAAWC,KAAK,iBAAK,QAAC,KAAD,CAAM;AAAN;AAEtB,UAAA,EAAE,EAAEA,KAAK,CAACC,EAFY;AAGtB,UAAA,IAAI,EAAED,KAAK,CAACE,IAHU;AAItB,UAAA,KAAK,EAAEF,KAAK,CAACG,KAJS;AAKtB,UAAA,OAAO,EAAEH,KAAK,CAACI,OALO;AAMtB,UAAA,MAAM,EAAEJ,KAAK,CAACK,kBANQ;AAOtB,UAAA,MAAM,EAAEL,KAAK,CAACM;AAPQ,WACjBN,KAAK,CAACC,EADW;AAAA;AAAA;AAAA;AAAA,gBAArB;AADH;AAAA;AAAA;AAAA;AAAA,cAJM,CAeR;;AAhBJ;AAAA;AAAA;AAAA;AAAA,YADF;AAqBJ;;AA1C+B;;AA4CnC,eAAeb,GAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";//PropTypes 모듈을 이용하여 변수형이 다를경우 콘솔에 에러메시지 할당 but 예제 실행시 작동이 안되는것 같다.\nimport axios from \"axios\";//fatch의 상위레이어개념\nimport Movie from \"./Movies\"//동일폴더에 존재하는 파일 import\n  \n\n  class App extends React.Component{//componet를 extend한 class App생성\n    state = {\n      isLoading: true ,\n      movies:[]//movies 미리 선언, 값이 할당되지 않음.\n    };\n  \n    getMovies = async () => {//어싱크로노스로 실행하여 데이터를 모두 받기전 렌더되지 않도록힘\n      const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n      //axios를 이용하여 proxy server에 있는 데이터를 movies에 할당. es 최신버전의 함수 활용\n      //await를 이용하여 axios가 모든 data를 가져올 수 있도록 기다림.\n     this.setState({movies, isLoading : false});//setState를 이용하여야 정보를 전달할 수 있음\n    } \n    componentDidMount() {//componet가 mount가 되며 실행되는 함수이며 getMovies();를 실행하도록 하였음.\n      this.getMovies();\n    }\n  \n\n  \n\n  render(){//렌더가 반복 실행되며 변경되는 컴포넌트에 대해서만 변경을 해주는 것이 리액트의 가장 큰 특징이며, 같은 홈페이지에서 새로고침 없이 \n        const {isLoading, movies} = this.state;\n        return (\n          <section className = \"container\">\n            {isLoading \n              ? ( <div className=\"loader\">\n                  <span className=\"loader__text\">Loading...</span>\n              </div>) : (\n                <div className=\"movies\">\n                  {movies.map(movie => (<Movie//map함수를 이용하여 server에서 받아온 movies에 접근하여 모든 변수들에 동시에 Movies.js에서 정의된 moive함수에 파라미터로 전달하여 npx를 활용하여 화면에 출력한다.\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                  />))}\n                  </div>\n              // ))\n        )}\n          </section>\n      );\n   }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}